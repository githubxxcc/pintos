+--------------------+
| PROJECT 1: THREADS |
|   DESIGN DOCUMENT  |
+--------------------+


ALARM CLOCK
===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

+/* List of processes in THREAD_SLEEP state */
+static struct list sleep_list;



---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

It will put the current thread to the wait_list;
then blocked the current thread by calling thread_block();

Details:
(Calling thread_sleep)
- get current thread
- disable interrupt 
- calculate wake up ticks 
- push the thread to the sleep_list
- thread_block()
- [after returned]
- enable interrupt

===========
schedule():
[interrupt is disabled] 
- check on the sleep_list
- wake up those lazy boys
- put them into the ready_list


==========
in timer interrupt: 
nothing is added. 


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Nothing extra is added in the timer interrupt handler. 

In schedule(), The sleep_list is sorted, with the earliest ot be wake up at the begining. So at each timer interrupt, it is not needed to iterate through the whole list. 


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
Interrupt is disabled before any critical instructions. So only one thread is allowed to access the wait_thread and modify it at one time.

[Question]
However, in a SMP multithreaded machine, synchronization on the sleep_list is needed if it is a global object? 

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
Interrupt will be disabled in critical steps. 


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
Alternative 1:
Leave the thread in the ready_list, and check each of them when considering which one to run by the scheduler. 
--
Current implementation is better in this design since it does not mess up with the ready_list. 

Alternative 2: 
Use an unsorted sleep_list. This will result O(n) in every single invocation of the timer interrupt. 
--
Current implementation has greater cost on inserting element into the list. But allows O(1) for removal and avoids unnecessary iterations during timer interrupt. So it will be better with more frequent timer interrupts and less invocations of timer_sleep()

Alternative 3: 
Waking up threads in every timer interrupt. 
--
This will incurs greater cost from checking the sleep_list more frequently. 


PRIORITY SCHEDULING
===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.



>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
        >> .png file.)
1. Thread TL running, acquiring Lock L1



---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

The waiters list of the semaphore will be sorted with priority in descending order. 
So the removal from the front will always be the one with the highest priority. 


>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
IF NOT a free lock:
    donate priority to holder, and holder's donees as well
ELSE:
    do nothing 
Sema_down on lock's semaphore
(Got the lock)
Set the lock's holder

** Handling nested donation 
priority donation will be propogated through the holder's chain. The current lock holder will have its priority changed.   
If the lock holder is locked by another lock LK, LK's current holder will recursively change its priority as well. 
If the lock holder is currently in the ready list, it needs to be re-queued to reflect change of the priority.


>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
a. When higher-priority thread is waiting for 
1. Remove all those threads waiting for the lock(aka, threads in the waiter list of the semaphore) from the thread's donors
2. Wake up a thread 
(It might get yielded before returning from sema_up) 

b. When lower-priority thread is waiting for it. 
Same thing happens.

c. When no thread waiting for it. 
Then no thread will be deleted from its donors list


---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

thread_set_priority() will cause a re-ordering of the ready_list. 
A lock on the read_list could be used to synchronize the modifications. 

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

ADVANCED SCHEDULER
==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
0
4
8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

SURVEY QUESTIONS
================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

